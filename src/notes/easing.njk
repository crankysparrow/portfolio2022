---
title: easing functions for cyclical animations
date: 2022-10-18
dateUpdated: 2022-10-19
layout: post.njk
excerpt: ""
tags: ['animation', 'generative art']
order: 5
draft: true
---

{% macro easingsTable(id, colNames,  fns) -%}

	<table id="{{ id }}" class='smaller'>
		<tr>
			<th scope="row">p</th>
			{% for i in range(0, 1, 0.1) -%}
				<td>{{ i | round }}</td>
			{%- endfor %}
		</tr>
		{% for colName in colNames %}
			<tr>
				<th scope="row">{{ colName }}</th>
			</tr>
		{% endfor %}

	</table>

	<script>
		let table = document.getElementById('{{ id }}')
		let rows = table.querySelectorAll('tr');
		ind = 1{% for fn in fns %}
			p = 0
			while (p <= 1) {
				let td = cell({{fn}})
				rows[ind].appendChild(td)
				p += 0.1
			}
			ind += 1
		{% endfor %}
	</script>

{%- endmacro %}

{% macro frame(src, style) -%}
	{% set frame = src %}

	{% include 'partials/frame.njk' %}
{% endmacro %}

<script>
	const round = (val, pos = 2) => Math.round(val * 10 * pos) / (10 * pos)

	const cell = (res) => {
		let td = document.createElement('td')
		td.innerHTML = round(res, 2)
		return td
	}

	function easeInOutSine(x) {
		return -(Math.cos(Math.PI * x) - 1) / 2
	}

	function easeInCubic(x) {
		return x * x * x
	}

	function easeInQuad(x) {
		return x * x
	}

	function easeInQuadCyc(p) {
		if (p < 0.5) {
			return easeInQuad(p * 2)
		} else {
			return 1 - easeInQuad((p - 0.5) * 2)
		}
	}

	function easeInCubicCyc(p) {
		if (p < 0.5) {
			return easeInCubic(p * 2)
		} else {
			return 1 - easeInCubic((p - 0.5) * 2)
		}
	}
</script>

<p>assuming a value <code>p</code> that moves between 0 and 1, adjust an animation's progress from 0 to 1 and back to 0 (or 1 to 0 and back to 1), using an <a href="https://easings.net/">easing function</a>
</p>

<p>
	<code>easeInOutSine</code> does this naturally if you multiply the value by 2. others i've fiddled with.</p>

{{ easingsTable('inoutsine',
	['easeInOutSine(p * 2)', 'abs(easeInCubic(p * 2 - 1))', 'easeInQuad', 'easeInQuadCyc(p)'],
 	['easeInOutSine(p * 2)', 'Math.abs(easeInCubic(p * 2 - 1))', 'easeInQuad(p)', 'easeInQuadCyc(p)'] ) }}

<div class='flex'>

	{% highlight 'js' %}
function easeInOutSine(x) {
	return - ( Math.cos( Math.PI * x ) - 1 ) / 2
}

function draw() {
	clear()
	fill(255, 20, 80)
	noStroke()

	let p = animLoop.progress
	let val = easeInOutSine(p * 2)

	let pos = map(val, 0, 1, height * 0.2, height * 0.8)
	let r = map(val, 0, 1, height * 0.2, height * 0.4)

	translate(width / 2, pos)
	circle(0, 0, r)
}
{% endhighlight %}

	{{ frame('/sketches/easings-1', '--width: 250px; --height: 250px;') }}

</div>

<div class='flex'>

	{% highlight 'js' %}
function easeInCubic(x) {
	return x * x * x
}

function draw() {
	//...
	let val = abs(easeInCubic(p * 2 - 1))

	let pos = map(val, 0, 1, height * 0.2, height * 0.8)
	let r = map(val, 0, 1, height * 0.2, height * 0.4)

	translate(width / 2, pos)
	circle(0, 0, r)
}
{% endhighlight %}

	{{ frame('/sketches/easings-2', '--width: 250px; --height: 250px;') }}

</div>

<div class='flex'>

	{% highlight 'js' %}
	function easeInCubic(x) {
	return x * x * x
}

function easeInCubicCyc(p) {
	if (p < 0.5) {
		return easeInCubic(p * 2)
	} else {
		return 1 - easeInCubic((p - 0.5) * 2)
	}
}
	{% endhighlight %}
	{{ frame( '/sketches/easings-3', '--width: 250px; --height: 250px;') }}

</div>

<div class='flex'>

	{% highlight 'js' %}
function easeInQuad(x) {
	return x * x
}

function easeInQuadCyc(p) {
	if (p < 0.5) {
		return easeInQuad(p * 2)
	} else {
		return 1 - easeInQuad((p - 0.5) * 2)
	}
}
	{% endhighlight %}
	<div class="column">
		{{ frame( '/sketches/easings-4', '--width: 250px; --height: 250px;') }}
	</div>

</div>

<style type='text/css'>
	@media (min-width: 630px) {
		.flex {
			display: flex;
		}
		.flex .frame-wrap {
			margin-right: 1rem;
		}
	}
	code[class*=language-],
	pre,
	pre[class*=language-] {
		font-size: 0.75rem;
	}
</style>